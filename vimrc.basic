syntax enable
" ctags -R * -f tags_virtualenv
set tags+=./tags
set backspace=indent,eol,start
set number
set fileencodings=utf-8,iso-2022-jp,utf-8,cp932,euc-jp,default,latin
set encoding=utf8
set laststatus=2
set tabstop=4
set cindent
set expandtab
set shiftwidth=4
set foldmethod=indent
set foldlevel=100
set mouse=a
set clipboard=unnamedplus
set modifiable
set write
nnoremap <silent> vr :source $MYVIMRC<CR>

nnoremap <silent> <C-s> <C-a>
nnoremap <silent> <C-]> g<C-]>
inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
nnoremap <silent> ,e :NERDTree<CR>
nnoremap <silent> fm :MRU<CR>

let NERDTreeIgnore=['\~$', '\.pyc$', '\.d$[[file]]', '\.o$[[file]]']
let NERDTreeShowBookmarks=1
let NERDTreeShowLineNumbers=1
let g:indent_guides_auto_colors = 0
let indent_guides_enable_on_vim_startup = 1
let indent_guides_color_change_percent = 80
let indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#121212 ctermbg=233
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#121212 ctermbg=233
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#262626 ctermbg=235
autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

"２５６色の設定とtmuxのPowerline の設定
set t_Co=256
let g:Powerline_symbols='fancy'

" 一時ファイル(Tmp 拡張子名で一時ファイルとなるファイルを開ける
command! -nargs=1 -complete=filetype Tmp edit ~/tmp.<args>
command! -nargs=1 -complete=filetype Temp edit ~/tmp.<args>

"メモリスト用の設定--------------------------------------------------------
map <Leader>mn  :MemoNew<CR>
map <Leader>ml  :MemoList<CR>
map <Leader>mg  :MemoGrep<CR>
let g:memolist_path = "~/Memo"

"SQLの結果をエクセルにペースト出来るようにする-----------------------------
function! SqlToCsv() range
    for line_number in range(a:firstline, a:lastline)
        let line_content = getline(line_number)
        let line_content = substitute(line_content, "^\s*|\s*", "", "g")
        let line_content = substitute(line_content, "\s*|\s*", "\t", "g")
        let line_content = substitute(line_content, " ", "", "g")
        call setline(line_number, line_content)
    endfor
endfunction

vmap <C-L> :call SqlToCsv()<CR>

"日付の入力補助
inoremap <expr> ,df strftime('%Y-%m-%d %H:%M:%S')
inoremap <expr> ,dd strftime('%Y-%m-%d')
inoremap <expr> ,dt strftime('%H:%M:%S')

"タブの設定BEGIN-----------------------------------------------------------
set showtabline=2
nmap tn :tabnew<CR>
nmap <C-l> gt
nmap <C-h> gT
nmap tm :tabmove
nnoremap <silent> tq :tabclose<CR>
" quick fix open
nnoremap <silent> ,co :copen<CR>
" quick fix close
nnoremap <silent> ,cc :cclose<CR>

"--------------------------------------------------------------------------
" 保存したときにPEP8()
" You need install flake8 first
autocmd BufWritePost *.py call Flake8()

"行番号切り替え------------------------------------------------------------
nnoremap <silent> sn :call SwitchNumber()<CR>
"swich number
function! SwitchNumber()
    if &number == 1
        set nonumber
    else
        set number
    endif
endfunction


"speeddating 日付をインクリメント　デクリメント
let g:speeddating_no_mappings=1
nmap <C-J> <Plug>SpeedDatingUp
nmap <C-K> <Plug>SpeedDatingDown
xmap <C-J> <Plug>SpeedDatingUp
xmap <C-K> <Plug>SpeedDatingDown
nmap d<C-J> <Plug>SpeedDatingNowUTC
nmap d<C-K> <Plug>SpeedDatingNowLocal

" Tabでウィンドウの移動
nnoremap <Tab> <C-w>w

"nnoremap  :set relativenumber<CR>
"nnoremap nor :set norelativenumber<CR>

nnoremap [q :cprevious<CR>   " 前へ
nnoremap ]q :cnext<CR>       " 次へ
nnoremap [Q :<C-u>cfirst<CR> " 最初へ
nnoremap ]Q :<C-u>clast<CR>  " 最後へ

"Search Files
function! s:SearchGrep(pat, ext)
    exe "vimgrep /".a:pat."/j **/*.".a:ext
    copen
endfunction
command! -nargs=+ MySearch call s:SearchGrep(<f-args>)

nnoremap <silent> <C-n> :col<CR>
nnoremap <silent> <C-p> :cnew<CR>
nnoremap <Leader>s :MySearch \<<C-r><C-w>\> 

source ~/.vim.secret
let g:SimplenoteVertical=1

function! s:EditDiary()
    exe 'Simplenote -o '
    exe 'only'
endfunction
command! Md call s:EditDiary()

" Key bind for resize window
nnoremap <silent> <S-h> <C-W>5>
nnoremap <silent> <S-l> <C-W>5<
nnoremap <silent> <S-k> <C-W>5-
nnoremap <silent> <S-j> <C-W>5+
